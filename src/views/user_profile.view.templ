package views

import (
"fmt"
"github.com/kylerequez/go-user-settings-example/src/models"
"github.com/kylerequez/go-user-settings-example/src/repositories"
"github.com/kylerequez/go-user-settings-example/src/utils"
"github.com/kylerequez/go-user-settings-example/src/views/layouts"
"strings"
)

func DisplayUpdateURL(
info models.AppInfo,
user *models.User,
) string {
if strings.Contains(info.CurrentPath, "profile") {
return fmt.Sprintf("/api/v1/users/%s/profile/update", user.ID.String())
} else {
return fmt.Sprintf("/api/v1/users/%s/update", user.ID.String())
}
}

func DisplayCancelURL(
info models.AppInfo,
user *models.User,
) string {
if strings.Contains(info.CurrentPath, "profile") {
return fmt.Sprintf("/api/v1/users/%s/profile/cancel", user.ID.String())
} else {
return fmt.Sprintf("/api/v1/users/%s/cancel", user.ID.String())
}
}

func DisableAuthority(
info models.AppInfo,
user *models.User,
) bool {
if info.LoggedInUser.Authority == repositories.AUTH_ADMIN && info.LoggedInUser.ID != user.ID {
return false
} else {
return true
}
}

templ UserProfile(
info models.AppInfo,
user *models.User,
msg *models.AppMessages,
) {
@layouts.MainLayout(info) {
<div id="user-profile" class="flex flex-col
	text-black
	dark:text-white 
	items-center justify-start space-y-10 h-screen w-full px-52 py-10">
	@UserProfileContainer(info, user, msg)
</div>
}
}

templ UserProfileContainer(
info models.AppInfo,
user *models.User,
msg *models.AppMessages,
) {
<div class="flex flex-col w-full font-semibold justify-start">
	<div class="text-4xl">User Profile</div>
	<hr class="h-fit w-full border-black dark:border-white" />
</div>
<div class="flex flex-col w-full justify-center space-y-10">
	<div class="flex flex-row">
		<div class="flex-1">
			<div>
				NAME:
				{ user.Name }
			</div>
		</div>
		<div class="flex-1">
			<div>
				EMAIL:
				{ user.Email }
			</div>
		</div>
	</div>
	<div class="flex flex-row">
		<div class="flex-1">
			<div>
				AUTHORITTY:
				{ strings.Title(user.Authority) }
			</div>
		</div>
	</div>
	<div class="flex flex-row">
		<div class="flex-1">
			<div>CREATED AT: { user.CreatedAt.String() }</div>
		</div>
		<div class="flex-1">
			<div>UPDATED AT: { user.UpdatedAt.String() }</div>
		</div>
	</div>
</div>
<div class="flex flex-col w-full font-semibold justify-start">
	<div class="text-4xl">User Settings</div>
	<hr class="h-fit w-full border-black dark:border-white" />
</div>
<div class="flex flex-col w-full justify-center space-y-6">
	<div class="flex flex-row">
		<div class="flex-1">
			<div>Theme: { strings.Title(strings.ToLower(user.Settings.Theme)) }</div>
		</div>
	</div>
</div>
if msg != nil && msg.Message != nil {
<div class="flex flex-row w-full font-semibold items-center justify-center space-x-4">
	<div class="flex-1 text-green-600">{ utils.DisplayMessage(*msg.Message) }</div>
</div>
}
if msg != nil && msg.Errors["update-form-err"]!= "" {
<div class="flex flex-row w-full font-semibold items-center justify-center space-x-4">
	<div class="flex-1 text-red-500">{ utils.DisplayMessage(msg.Errors["update-form-err"]) }</div>
</div>
}
if msg != nil && msg.Errors["delete-form-err"]!= "" {
<div class="flex flex-row w-full font-semibold items-center justify-center space-x-4">
	<div class="flex-1 text-red-500">{ utils.DisplayMessage(msg.Errors["delete-form-err"]) }</div>
</div>
}
if info.LoggedInUser.Authority == repositories.AUTH_ADMIN || info.LoggedInUser.ID == user.ID {
<div class="flex flex-row w-full font-semibold items-center justify-end space-x-4">
	<button class="border border-black rounded hover:bg-black hover:text-white
	dark:border dark:border-white dark:rounded dark:hover:bg-white dark:hover:text-black
	px-4 py-2" hx-get={ DisplayUpdateURL(info, user) } hx-target="#user-profile" hx-swap="innerHTML">
		Update
	</button>
	if info.LoggedInUser.ID != user.ID {
	<button class="border border-red-500 rounded text-red-600 hover:bg-red-500 hover:text-white px-4 py-2" hx-get={
		fmt.Sprintf("/api/v1/users/%s/delete", user.ID.String()) } hx-target="#user-profile" hx-swap="innerHTML">
		Delete
	</button>
	}
</div>
}
}

templ UserUpdateForm(
info models.AppInfo,
user *models.User,
msg *models.AppMessages,
form *models.UsersUpdateFormData,
) {
<form class="flex flex-col text-black dark:text-white items-center justify-start space-y-10 w-full" hx-patch={
	DisplayUpdateURL(info, user) } hx-trigger="submit" hx-target="#user-profile" hx-swap="innerHTML">
	<div class="flex flex-col w-full font-semibold justify-start">
		<div class="text-4xl">User Profile</div>
		<hr class="h-fit w-full border-black dark:border-white" />
	</div>
	<div class="flex flex-col w-full justify-center space-y-10">
		<div class="flex flex-row">
			<div class="flex-1">
				<div>
					NAME:
					<input type="text" name="name" class="text-black bg-white border border-black rounded 
					dark:text-white dark:bg-black dark:border dark:border-white dark:rounded 
					px-4 py-2 w-fit" value={ user.Name } />
				</div>
				if msg != nil && msg.Errors["update-form-name-err"] != "" {
				<div class="text-red-500 font-semibold">
					{ utils.DisplayMessage(msg.Errors["update-form-name-err"]) }
				</div>
				}
			</div>
			<div class="flex-1">
				<div>
					EMAIL:
					<input type="text" name="email" class="text-black bg-white border border-black rounded 
					dark:text-white dark:bg-black dark:border dark:border-white dark:rounded 
					px-4 py-2 w-fit" value={ user.Email } />
				</div>
				if msg != nil && msg.Errors["update-form-email-err"] != "" {
				<div class="text-red-500 font-semibold">
					{ utils.DisplayMessage(msg.Errors["update-form-email-err"]) }
				</div>
				}
			</div>
		</div>
		<div class="flex flex-row">
			<div class="flex-1">
				if info.LoggedInUser.ID == user.ID {
				<div>
					AUTHORITTY:
					{ strings.Title(user.Authority) }
					<input type="hidden" name="authority" value={ user.Authority } />
				</div>
				} else {
				<div>
					AUTHORITTY:
					<select name="authority" class="text-black bg-white border border-black rounded 
					dark:text-white dark:bg-black dark:border dark:border-white dark:rounded 
					px-4 py-2 w-fit">
						for _, authority := range repositories.AUTHORITIES {
						if strings.EqualFold(authority, user.Authority) {
						<option value={ authority } selected>{ strings.Title(strings.ToLower(authority)) }</option>
						} else {
						<option value={ authority }>{ strings.Title(strings.ToLower(authority)) }</option>
						}
						}
					</select>
				</div>
				}
			</div>
		</div>
		<div class="flex flex-row">
			<div class="flex-1">
				<div>CREATED AT: { user.CreatedAt.String() }</div>
			</div>
			<div class="flex-1">
				<div>UPDATED AT: { user.UpdatedAt.String() }</div>
			</div>
		</div>
	</div>
	<div class="flex flex-col w-full font-semibold justify-start">
		<div class="text-4xl">User Settings</div>
		<hr class="h-fit w-full border-black dark:border-white" />
	</div>
	<div class="flex flex-col w-full justify-center space-y-6">
		<div class="flex flex-row">
			<div class="flex-1">
				<div>
					Theme:
					<select name="theme" class="text-black bg-white border border-black rounded 
					dark:text-white dark:bg-black dark:border dark:border-white dark:rounded 
					px-4 py-2 w-fit">
						for _, theme := range []string{"dark", "light"} {
						if strings.EqualFold(theme, user.Settings.Theme) {
						<option value={ theme } selected>{ strings.Title(strings.ToLower(theme)) }</option>
						} else {
						<option value={ theme }>{ strings.Title(strings.ToLower(theme)) }</option>
						}
						}
					</select>
				</div>
			</div>
		</div>
	</div>
	if msg != nil && msg.Errors["update-form-err"] != "" {
	<div class="text-red-500 font-semibold">
		{ utils.DisplayMessage(msg.Errors["update-form-err"]) }
	</div>
	}
	<div class="flex flex-row w-full font-semibold items-center justify-end space-x-4">
		<button type="submit" class="
		border border-black rounded hover:bg-gray-700 hover:text-white
		dark:border dark:border-white dark:rounded dark:hover:bg-white dark:hover:text-black
		px-4 py-2">
			Save
		</button>
		<button class="border border-red-500 rounded text-red-600 hover:bg-red-500 hover:text-white px-4 py-2" hx-get={
			DisplayCancelURL(info, user) } hx-target="#user-profile" hx-swap="innerHTML">
			Cancel
		</button>
	</div>
</form>
}

templ UserDeleteForm(
info models.AppInfo,
user *models.User,
msg *models.AppMessages,
) {
<form class="flex flex-col text-black dark:text-white items-center justify-start space-y-10 w-full" hx-delete={
	fmt.Sprintf("/api/v1/users/%s/delete", user.ID.String()) } hx-target="#user-profile" hx-swap="innerHTML">
	<div class="flex flex-col w-full font-semibold justify-start">
		<div class="text-4xl">Are you sure you want to delete this user?</div>
	</div>
	<div class="flex flex-row w-full font-semibold items-center justify-end space-x-4">
		<button type="submit" class="
		border border-black rounded hover:bg-black hover:text-white
		dark:border dark:border-white dark:rounded dark:hover:bg-white dark:hover:text-black
		px-4 py-2">
			Confirm
		</button>
		<button class="border border-red-500 rounded text-red-600 hover:bg-red-500 hover:text-white px-4 py-2" hx-get={
			fmt.Sprintf("/api/v1/users/%s/cancel", user.ID.String()) } hx-target="#user-profile" hx-swap="innerHTML">
			Cancel
		</button>
	</div>
</form>
}
